<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright [2010], Red Hat, Inc., and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="introduction">
   <title>Introduction</title>

   <para>
      Exceptions are a fact of life. As developers, we need to be prepared to deal with them in the most graceful manner
      possible. Seam Catch provides a simple, yet robust foundation for modules and/or applications to establish a
      customized exception handling process. By employing a delegation model, Catch allow exceptions to be addressed in
      a centralized, extensible and uniform manner. 
   </para>
  
   <para>
      Catch is first notified of an exception to be handled via a CDI event. This event is fired either by the
      application or a Catch integration. Catch then hands the exception off to a chain of registered handlers, which
      deal with the exception appropriately. The use of CDI events to connect exceptions to handlers makes this strategy
      of exception handling non-invasive and minimally coupled to Catch's infrastructure. 
   </para>
      
   <para>
      The exception handling process remains mostly transparent to the developer. In some cases, you register an
      exception handler simply by annotating a handler method. Alternatively, you can handle an exception
      programmatically, just as you would observe an event in CDI.
   </para>
   
   <para>
      In this guide, we'll explore the various options you have for handling exceptions using Catch, as well as how
      framework authors can offer Catch integration.
   </para>

   <!--
   vim:et:ts=3:sw=3:tw=120
   -->
</chapter>
