<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright [2010], Red Hat, Inc., and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="integration">
   <title>Framework Integration</title>

   <para>
      Integration of Seam Catch with other frameworks consists of one main step, and two other optional (but highly
      encouraged) steps:
   </para>

   <itemizedlist>
      <listitem>creating and firing an <literal>ExceptionToCatch</literal> </listitem>
      <listitem>adding any default handlers and qualifiers with annotation literals (optional)</listitem>
      <listitem>supporting ServiceHandlers for creating exception handlers</listitem>
   </itemizedlist>

   <section id="integration.exceptiontocatchevent">
      <title>Creating and Firing an ExceptionToCatch event</title>

      <para>
         An <literal>ExceptionToCatch</literal> is constructed by passing a <literal>Throwable</literal> and
         optionally qualifiers for handlers. Firing the event is done via CDI events (either straight from the
         <literal>BeanManager</literal> or injecting a <literal>Event&lt;ExceptionToCatch&gt;</literal>
         and calling fire).
      </para>

      <para>
         To ease the burden on the application developers, the integration should tie into the exception handling
         mechanism of the integrating framework, if any exist. By tying into the framework's exception handling,
         any uncaught exceptions should be routed through the Seam Catch system and allow handlers to be invoked.
         This is the typical way of using the Seam Catch framework. Of course, it doesn't stop the application
         developer from firing their own <literal>ExceptionToCatch</literal> within a catch block.
      </para>
   </section>

   <section id="integration.built-in">
      <title>Default Handlers and Qualifiers</title>

      <section id="integration.default_handlers">
         <title>Default Handlers</title>

         <para>
            An integration with Catch can define it's own handlers to always be used. It's recommended that any
            built-in handler from an integration have a very low precedence, be a handler for as generic an
            exception as is suitable (i.e. Seam Persistence could have a built-in handler for PersistenceExceptions to
            rollback a transaction, etc), and make use of qualifiers specific for the integration. This helps limit any
            collisions with handlers the application developer may create.
         </para>

         <note>
            Hopefully at some point there will be a way to conditionally enable handlers so the application developer
            will be able to selectively enable any default handlers. Currently this does not exist, but is something
            that will be explored.
         </note>
      </section>

      <section id="integration.qualifiers">
         <title>Qualifiers</title>

         <para>
            Catch supports qualifiers for the<literal>CaughtException</literal>. To add a qualifier to be used when
            firing handlers they must be add to the <literal>ExceptionToCatch</literal> via the constructor (please
            see API docs for more info). Qualifiers for integrations should be used to avoid collisions in the
            application error handling both when defining handlers and when firing events from the integration.
         </para>
      </section>

   </section>

   <section id="integration.servicehandlers">
      <title>Supporting ServiceHandlers</title>

      <para> 
         <ulink url="http://docs.jboss.org/weld/extensions/reference/latest/en-US/html_single/#servicehandler">
            ServiceHandlers</ulink> make for a very easy and concise way to define exception handlers take
        the following example comes from the jaxrs example in the distribution: 
      </para>

      <programlisting role="JAVA"><![CDATA[@HandlesExceptions
@ExceptionResponseService
public interface DeclarativeRestExceptionHandlers
{
               
   @SendHttpResponse(status = 403, message = "Access to resource denied (Annotation-configured response)")
   void onNoAccess(@Handles @RestRequest CaughtException<AccessControlException> e);

   @SendHttpResponse(status = 400, message = "Invalid identifier (Annotation-configured response)")
   void onInvalidIdentifier(@Handles @RestRequest CaughtException<IllegalArgumentException> e);
}]]>
      </programlisting>

      <para>
         All the vital information that would normally be done in the handler method is actually contained in the
         <literal>@SendHttpResponse</literal> annotation. The only thing left is some boiler plate code to setup
         the <literal>Response</literal>. In a jax-rs application (or even in any web application) this approach helps
         developers cut down on the amount of boiler plate code they have to write in their own handlers and should
         be implemented in any Catch integration, however, there may be situtations where ServiceHandlers simply do not
         make sense.
      </para>

      <note>
         If ServiceHandlers are implemented make sure to document if any of the methods are called from 
         <literal>CaughtException</literal>, specifically <literal>abort()</literal>, <literal>handled()</literal>
         or <literal>rethrow()</literal>. These methods affect invocation of other handlers (or rethrowing the
         exception in the case of <literal>rethrow()</literal>).
      </note> 

   </section>
   <!--
   vim:et:ts=3:sw=3:tw=120
   -->
</chapter>
